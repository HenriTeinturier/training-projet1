name: CI/CD workflow

#! on va ajouter des variables d'environnement ici.
# Bien sûr on pourrait aussi mettre ces variables dans les secrets du repo.
env:
  SERVER_IP: "ec2-51-21-115-3.eu-north-1.compute.amazonaws.com"
  SERVER_USER: "ubuntu"
  SERVER_PORT: "2222"

# On va gérer la concurrence des jobs afin de ne lancer qu'un workflow à la fois et annuler le workflow en cours si un nouveau workflow "CI/CD workflow" est lancé
concurrency:
  group: ${{ github.workflow }} # Groupe de concurrence basé sur le nom du workflow
  cancel-in-progress: true # Annule le workflow en cours si un nouveau workflow "CI/CD workflow" est lancé

# On va lancer le workflow lorsqu'un push est fait sur la branche main
on:
  push:
    branches:
      - main

# pour les jobs on va en faire un ou on va regrouper nos tests et un autre pour le deploiement:
jobs:
  # pour le job test on va mettre dedans:
  # verifier le code avec le script lint
  # Vérifier les vulnérabilités de nos dépendences avec la commande npm audit
  # Lancer les tests avec le script test:ci
  tests:
    runs-on: ubuntu-latest
    # on précise le répertoire de travail pour ne pas le spécifier à chaque fois
    defaults:
      run:
        working-directory: ./server
    strategy:
      matrix:
        npm_command:
          [
            "run test:ci",
            "run lint",
            "audit --production --audit-level=critical",
          ]
      fail-fast: true
    steps:
      # on récupère notre repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4

        with:
          cache: "npm"
          cache-dependency-path: "./server/package-lock.json"
      - name: Install dependencies
        run: npm ci

      - name: run tests
        run: npm ${{ matrix.npm_command }}

      # - name: Verify code
      #   run: npm run lint

      # - name: Verify vulnerabilities
      #   run: npm audit --production --audit-level=critical

      # - name: Run tests
      #   run: npm run test:ci

  # deploy:
  #   # on veut que le deploy ne s'execute que si les tests sont passés
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     # premiere chose on récupère le code source
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # on va maintenant s'occuper du deploiement. On va faire plusieurs commandes dans la step
  #     - name: Deploy
  #       run: |
  #         eval "$(ssh-agent -s)"
  #         ssh-add - <<< "${{ secrets.SSH_KEY_VPS }}"
  #         mkdir -p ~/.ssh
  #         ssh-keyscan -H -p ${{ env.SERVER_PORT }} ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
  #         scp -P ${{ env.SERVER_PORT }} -r ./server ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/ubuntu/
  #         ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "cd /home/ubuntu/server && npm ci --omit=dev"
  #         ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "cd /home/ubuntu/server && sudo pm2 startOrRestart ecosystem.config.js --env production && sudo pm2 save"
